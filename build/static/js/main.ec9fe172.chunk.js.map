{"version":3,"sources":["api/search.ts","components/Item/Item.tsx","components/Autocomplete/Autocomplete.tsx","serviceWorker.ts","index.tsx","components/SearchBox/SearchBox.tsx"],"names":["mapResults","res","results","docs","map","el","country","city","region","name","iata","placeType","getType","type","Item","result","onClick","useState","classOnFocus","setClassOnFocus","locationName","filter","join","locationCity","handleEventOnActive","handleEventOnInactive","className","classNames","tabIndex","onMouseOver","onMouseLeave","onFocus","onBlur","aria-label","onKeyDown","e","key","Autocomplete","length","data-testid","index","Boolean","window","location","hostname","match","ReactDOM","setResults","inputValue","setInputValue","id","htmlFor","placeholder","aria-labelledby","onChange","value","target","term","rows","fetch","encodeURIComponent","then","ok","json","Error","responseJson","hasError","data","catch","error","console","log","getSearchResults","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.ec9fe172.chunk.js","sourcesContent":["export interface IResults {\n  country: string\n  city: string\n  region: string\n  name: string\n  iata: string\n  placeType: string\n}\n\nexport interface IResponse {\n  hasError: boolean,\n  data: IResults[]\n}\n\nexport const getSearchResults = (term: string, rows: number = 6): Promise<IResponse> => (\n  fetch(`https://www.rentalcars.com/FTSAutocomplete.do?solrIndex=fts_en&solrRows=${rows}&solrTerm=${encodeURIComponent(term)}`)\n    .then(res => {\n      if (res.ok) {\n        return res.json()\n      } else {\n        throw new Error('Something went wrong')\n      }\n    })\n    .then((responseJson) => {\n      return {\n        hasError: false,\n        data: mapResults(responseJson),\n      }\n    })\n    .catch((error) => {\n      console.log(error)\n      return {\n        hasError: true,\n        data: [],\n      }\n    })\n)\n\nconst mapResults = (res: any) => res?.results?.docs.map((el: any): IResults => ({\n  country: el.country,\n  city: el.city,\n  region: el.region,\n  name: el.name,\n  iata: el.iata,\n  placeType: el.placeType ? getType(el.placeType) : el.placeType,\n})) || []\n\nexport  const getType = (placeType: string): string => {\n  let type\n  switch (placeType) {\n    case 'A':\n      type = 'Airport'\n      break\n    case 'C':\n      type = 'City'\n      break\n    case 'S':\n      type = 'Station'\n      break\n    default:\n      type = 'Other'\n      break\n  }\n  return type\n}\n","import { IResults } from '../../api/search'\nimport React, { useState } from 'react'\nimport classNames from 'classnames'\n\ninterface IItemProps {\n  result: IResults\n  onClick: (value: string) => void\n}\n\nexport const Item = ({ result, onClick }: IItemProps) => {\n  const { name, placeType, city, country, iata, region } = result\n  const [classOnFocus, setClassOnFocus] = useState<string>('')\n  const locationName = [name, iata].filter(el => el).join(' ')\n  const locationCity = [city, region, country].filter(el => el).join(', ')\n\n  const handleEventOnActive = () => setClassOnFocus('item--focus')\n  const handleEventOnInactive = () => setClassOnFocus('')\n  const handleOnClick = () => onClick(locationName)\n  const handleOnKeyDown = (e: React.KeyboardEvent) => {\n    if (e.key === 'Enter') {\n      onClick(locationName)\n    }\n  }\n\n  return (\n    <li\n      className={classNames('item', classOnFocus)}\n      tabIndex={0}\n      onMouseOver={handleEventOnActive}\n      onMouseLeave={handleEventOnInactive}\n      onFocus={handleEventOnActive}\n      onBlur={handleEventOnInactive}\n      aria-label={name}\n      onClick={handleOnClick}\n      onKeyDown={handleOnKeyDown}\n    >\n      {placeType &&\n        <>\n          <div className=\"item__place\">\n            <span className=\"item__pill\">{placeType}</span>\n          </div>\n          <div className=\"item__location\">\n            <span className=\"item__location-name\">{locationName}</span>\n            <span className=\"item__location-city\">{locationCity}</span>\n          </div>\n        </>\n       }\n      {!placeType &&\n        <div className=\"item__place\">\n          {name}\n        </div>\n      }\n    </li>\n  )\n}\n","import { IResults } from '../../api/search'\nimport React from 'react'\nimport { Item } from '../Item/Item'\n\ninterface IAutocomplete  {\n  results: IResults[]\n  onClick: (value: string) => void\n}\n\nexport const Autocomplete = ({ results, onClick }: IAutocomplete) => {\n  return (\n    <>\n      {results.length > 0 &&\n        <div\n          className=\"autocomplete\"\n          data-testid=\"autocomplete\"\n        >\n          <ol className=\"autocomplete__list\">\n            {results.map((el, index) => (\n              <Item\n                key={index}\n                result={el}\n                onClick={onClick}\n              />\n            ))}\n          </ol>\n        </div>\n      }\n    </>\n  )\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n)\n\nexport function register(config: any) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA',\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl: any, config: any) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl: any, config: any) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.',\n      )\n    })\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister()\n      })\n      .catch(error => {\n        console.error(error.message)\n      })\n  }\n}\n","import * as React from 'react'\nimport * as ReactDOM from 'react-dom'\nimport './scss/main.scss'\nimport { SearchBox } from './components/SearchBox/SearchBox'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<SearchBox />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n\nserviceWorker.unregister()\n","import React, { useState } from 'react'\nimport { getSearchResults, IResponse, IResults } from '../../api/search'\nimport { Autocomplete } from '../Autocomplete/Autocomplete'\n\nexport const SearchBox = () => {\n\n  const [results, setResults] = useState<IResults[]>([])\n  const [inputValue, setInputValue] = useState<string>('')\n\n  const handleOnChange = (e: React.ChangeEvent<HTMLInputElement>)  => {\n    const value = e.target.value\n    setInputValue(value)\n    if  (value.length >= 2) {\n      getSearchResults(e.target.value)\n        .then((res: IResponse) => {\n          if (!res.hasError) {\n            setResults(res.data)\n          }\n        })\n    } else {\n      setResults([])\n    }\n  }\n\n  const handleOnClick = (value: string) =>  {\n    setInputValue(value)\n    setResults([])\n  }\n\n  return (\n    <div className=\"search-box\">\n      <h2>Where are  you going?</h2>\n      <label\n        id=\"search-box-label\"\n        htmlFor=\"search-box-input\"\n      >\n        Pick-up Location\n      </label>\n      <input\n        id=\"search-box-input\"\n        data-testid=\"search-box-input\"\n        className=\"search-box__input\"\n        type=\"text\"\n        placeholder=\"city, airport, station, region and district...\"\n        aria-labelledby=\"search-box-label\"\n        onChange={handleOnChange}\n        value={inputValue}\n      />\n      <Autocomplete\n        results={results}\n        onClick={handleOnClick}\n      />\n    </div>\n  )\n}\n"],"sourceRoot":""}